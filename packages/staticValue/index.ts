/****************************************************************************
 *  @Author earthnut
 *  @Email earthnut.dev@outlook.com
 *  @ProjectName color-pen
 *  @FileName t.ts
 *  @CreateDate  周二  04/22/2025
 *  @Description ANSI 转义相关
 ****************************************************************************/

/**   ANSI 转义序列的起始标志符  */
export const esc = '\x1b';

// t 的保留是因为在很多项目中使用，且过多，只能在大版本只进行更替，
/**
 * ## ANSI 转义序列的前缀
 *
 * 英文 Control Sequence Introducer
 */
export const csi = `${esc}[`;

/**
 * 重置终端的样式
 *
 * 重置终端的文本样式，如文本（前景）色、背景色、字体粗细、是否斜体、是否隐藏文本色、是否启用方向显示
 */
export const terminalResetStyle = `${csi}0m`;

/**
 *
 * 适用于含 ANSI 的字符串
 *
 * <span style="color: #ff0">请注意：使用时正则的 lastIndex 数值</span>
 * @returns 返回的匹配正则（带有 `g`  标志参数）
 *
 * 使用该函数创建的正则 exec 调用返回的数组解析
 *
 * - 0 匹配到的字符串
 * - 1 匹配到的设置属性的规则（整个前部分，除 |(\\x1b[78DMc]) 以外的部分）  eg.（`\x1b[38;5;125;2;5;34;5;225m` 中的 `\x1b[38;5;125;2;5;34;5;225m`； `\x1b[?25h` 中的 `\x1b[?25h` ）
 * - 2 匹配到的除了一个步骤除了 `\x1b` 部分外的其他部分 eg. （`\x1b[38;5;125;2;5;34;5;225m` 中的 `38;5;125;2;5;34;5;225m` ； `\x1b[?25h` 中的 `?25h` ）
 * - 3 从这里开始到 14 匹配到的是第一个字符中的数组中的每一项及其子项匹配到符合 `(([0-4]?[0-9])(;([0-4]?[0-9]+))*m)`  eg.（`\x1b[38;5;125;2;5;34;5;225m` 中的 `38;5;125;2;5;34;5;225m`  ）
 * - 4 匹配到符合 `(([0-4]?[0-9])(;([0-4]?[0-9]+))*m)` 规则的 `([0-4]?[0-9])` 部分 eg.（`\x1b[38;5;125;2;5;34;5;225m` 中的 `38`  ）
 * - 5 匹配到符合 `(([0-4]?[0-9])(;([0-4]?[0-9]+))*m)` 规则的 `(;([0-4]?[0-9]+))` 部分 eg.（`\x1b[38;5;125;2;5;34;5;225m` 中的 `;225`  ）
 * - 6 匹配到符合 `(([0-4]?[0-9])(;([0-4]?[0-9]+))*m)` 规则的 `([0-4]?[0-9]+)` 部分 eg.（`\x1b[38;5;125;2;5;34;5;225m` 中的 `225` ）
 * - 7 匹配到符合 `([mrJK])`  eg. （`\x1b[m` 中的 `m`；`\x1b[r` 中的 `r` ；`\x1b[K` 中的 `K`；`\x1b[J` 中的 `J` ）
 * - 8 匹配到的 `(\\?(25|7)[hl])` eg. （`\x1b?25l` 中的 `?25l`；`\x1b?25h` 中的 `?25h`；`\x1b?7l` 中的 `?7l`；`\x1b?7h` 中的 `?7h`）
 * - 9 匹配到的 `(\\?(25|7)[hl])` 中的 `(25|7)` eg. （`\x1b?25l` 和 `\x1b?25h` 中的 `25`；`\x1b?7l` 和 `\x1b?7h` 中的 `7`）
 * - 10 匹配到 `(\\d?;?\\d?[HFr])`  eg. （`\x1b[12r` 中的 `12r`；`\x1b[1;2r` 中的 `1;2r`；）
 * - 11 匹配到 `(6n)` eg. （`\x1b[6n` 中的 `6n`）
 * - 12 匹配到 `(\\d{0,4}[A-DTS])` eg. （`\x1b[A` 中的 `A`；`\x1b[10A` 中的 `10A`；`\x1b[23D` 中的 `23D`）
 * - 13 匹配到 `([0-3]?[JKg])` eg. （`\x1b[J` 中的 `J`；`\x1b[0J` 中的 `0J`；`\x1b[3g` 中的 `3g`）
 * - 14 匹配到 `([0-6]?W)` eg. （`\x1b[W` 中的 `W`；`\x1b[0W` 中的 `0W`；`\x1b[3W` 中的 `3W`）
 * - 15 匹配到 `(\\x1b[78DMc])` eg. （`\x1b7` 中的 `\x1b7`；`\x1b8` 中的 `\x1b8`；`\x1bD` 中的 `\x1bD`；）
 */
export function terminalRegExp(): RegExp {
  return new RegExp(
    `(\\x1b\\[(${[
      // 设置属性
      '(([1-4]?[0-9])(;([1-4]?[0-9]+))*m)',
      // 重置属性、全屏滚动、清理屏幕到底部、清理到行末
      '([m])',
      // 光标的显隐,光标到达屏幕的最右侧是否换行
      '(\\?(25|7)[hl])',
      // 设置光标的位置及设置终端屏幕滚动的尺寸
      '(\\d*;?\\d*[HFr])',
      // 获取光标的位置
      '(6n)',
      // 设置光标移动及新行添加情况（ST）
      '(\\d{0,4}[A-DTS])',
      // 重置属性
      // 清除行或清理屏
      // 清除制表符相关
      '([0-3]?[JKg])',
      // 制表符相关
      '([0-6]?W)',
    ].join('|')}))`
      /**    */
      .concat(`|(\\x1b[78DMc])`),
    'g',
  );
}
